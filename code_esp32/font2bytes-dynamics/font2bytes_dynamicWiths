from PIL import Image, ImageDraw, ImageFont
from numpy import asarray, ceil, array, sum, concatenate

# -*- coding: utf-8 -*-

filename = 'OpenSans28'  # <----- select new font name
fontname = 'OpenSans-Medium.ttf'
height = 28
THRESHOLD = 160
font_offset = 7 # recommended to be at least 4
binary_byte = array([128, 64, 32, 16, 8, 4, 2, 1])

char_widths = {}  # dictionnaire des largeurs dynamiques

def createTMPimage(ASCII):
    font = ImageFont.truetype(f"fonts/{fontname}", height - font_offset)
    char = chr(ASCII)
    text_width = int(font.getlength(char))
    char_widths[ASCII] = text_width

    image = Image.new('RGB', (text_width, height), color=(0, 0, 0))
    draw = ImageDraw.Draw(image)
    draw.text((0, 0), char, font=font)
    image.save(f'tmp/{ASCII}.bmp')


def readImage2Binary(ASCII):
    image = Image.open(f'tmp/{ASCII}.bmp')
    data = asarray(image)
    binary_map = data[:, :, 0]
    return binary_map


def convertMap2Hex(binary_map, width):
    hex_map = []
    for line in range(binary_map.shape[0]):
        for bit_chunks in range(int(ceil(width / 8))):
            tmp = binary_map[line][bit_chunks * 8:min((bit_chunks + 1) * 8, width)]
            tmp = array(list(map(lambda x: int(x > THRESHOLD), tmp)))
            tmp = concatenate((tmp, array([0] * (8 - len(tmp)))))  # padding
            binary_value = int(sum(tmp * binary_byte))
            hex_map.append(f"{binary_value:#0{4}x}")
    return hex_map


def write_file_intro(f):
    f.write('/* Includes ------------------------------------------------------------------*/\n')
    f.write('#include "fonts.h"\n')
    f.write(f'const uint8_t Font{height}_Table [] = \n')
    f.write('{\n')


def write_file_closure(f):
    
    f.write('};\n\n')

    f.write('const uint8_t Font{}_Widths[] = {{\n'.format(height))
    for i in range(32, 255):
        width = char_widths.get(i, 0)
        f.write(f'    {width}, // {i}: "{chr(i)}"\n')
    f.write('};\n')

    f.write(f'sFONT Font{height} = {{\n')
    f.write(f'\tFont{height}_Table,\n')
    f.write(f'\tFont{height}_Widths,\n')
    f.write(f'\t{height}, /* Height */\n')
    f.write('};\n\n')


def write_letter(f, ASCII, hex_map, width):
    expected_len = height * ceil(width / 8)
    assert len(hex_map) == expected_len, f"Erreur : {chr(ASCII)} a {len(hex_map)} octets, attendu {expected_len}"
    f.write(f'\t// ASCII: {ASCII} "{chr(ASCII)}" ({width} pixels wide)\n')
    count = 0
    f.write('\t')
    for item in hex_map:
        f.write(f'{item}, ')
        count += 1
        if count == 3:
            f.write('\n\t')
            count = 0
    f.write('\n')


if __name__ == "__main__":
    with open(f'output/{filename}.cpp', 'w', encoding='utf-8') as f:
        write_file_intro(f)

        for ASCII in range(32, 255):
            print(f'working on ASCII: {ASCII}: {chr(ASCII)}')
            createTMPimage(ASCII)
            width = char_widths[ASCII]
            binary_map = readImage2Binary(ASCII)
            hex_map = convertMap2Hex(binary_map, width)
            write_letter(f, ASCII, hex_map, width)

        write_file_closure(f)
